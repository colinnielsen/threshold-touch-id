
/* Autogenerated file, do not edit! */

/* eslint-disable */
import { AztecAddress, CompleteAddress, ContractBase, ContractFunctionInteraction, ContractMethod, DeployMethod, FieldLike, AztecAddressLike, EthAddressLike, Wallet } from '@aztec/aztec.js';
import { Fr, Point } from '@aztec/foundation/fields';
import { PXE, PublicKey } from '@aztec/types';
import { ContractAbi } from '@aztec/foundation/abi';
import MainContractAbiJson from '../target/Main.json' assert { type: 'json' };
export const MainContractAbi = MainContractAbiJson as ContractAbi;

/**
 * Type-safe interface for contract Main;
 */
export class MainContract extends ContractBase {
  
  private constructor(
    /** The deployed contract's complete address. */
    completeAddress: CompleteAddress,
    /** The wallet. */
    wallet: Wallet,
  ) {
    super(completeAddress, MainContractAbi, wallet);
  }
  

  
  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(
    /** The deployed contract's address. */
    address: AztecAddress,
    /** The wallet. */
    wallet: Wallet,
  ) {
    const extendedContractData = await wallet.getExtendedContractData(address);
    if (extendedContractData === undefined) {
      throw new Error('Contract ' + address.toString() + ' is not deployed');
    }
    return new MainContract(extendedContractData.getCompleteAddress(), wallet);
  }

  
  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(pxe: PXE, ) {
    return new DeployMethod<MainContract>(Point.ZERO, pxe, MainContractAbi, Array.from(arguments).slice(1));
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
   */
  public static deployWithPublicKey(pxe: PXE, publicKey: PublicKey, ) {
    return new DeployMethod<MainContract>(publicKey, pxe, MainContractAbi, Array.from(arguments).slice(2));
  }
  

  
  /**
   * Returns this contract's ABI.
   */
  public static get abi(): ContractAbi {
    return MainContractAbi;
  }
  

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public methods!: {
    
    /** get_storage() */
    get_storage: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
  };
}
